name: CI-CD

on:
  push:
    branches: master

jobs:
  build-js:
    name: Build Js/Css
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2.3.3
      - name: Use Node.js 12
        uses: actions/setup-node@v2.1.2
        with:
          node-version: '12'
      - name: Cache NPM dependencies
        uses: actions/cache@v1
        with:
          path: node_modules
          key: ${{ runner.OS }}-npm-cache-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.OS }}-npm-cache-
      - name: Install NPM dependencies
        run: |
          npm install
          npm run prod
          cat public/mix-manifest.json # See asset versions in log
      - name: Upload build files
        uses: actions/upload-artifact@v1
        with:
          name: assets
          path: public
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-js]
    if: github.ref == 'refs/heads/master'
    steps:
      - uses: actions/checkout@v2.3.3
      - name: Download build assets
        uses: actions/download-artifact@v1
        with:
          name: assets
          path: public
      - name: Setup PHP
        uses: shivammathur/setup-php@master
        with:
          php-version: 7.4
          extension: mbstring, bcmath
      - name: Validate composer.json and composer.lock
        run: composer validate

      - name: Get composer cache directory
        id: composer-cache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"

      - name: Cache composer dependencies
        uses: actions/cache@v1
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Install Composer dependencies
        run: composer install --no-interaction --prefer-dist --optimize-autoloader
      #- name: Setup Deployer
      #  uses: atymic/deployer-php-action@master
      #  with:
      #    ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
      #    ssh-known-hosts: ${{ secrets.SSH_KNOWN_HOSTS }}
      # - name: Deploy to Prod
      #   env:
      #     DOT_ENV: ${{ secrets.DOT_ENV }}
      #   run: dep deploy production --tag=${{ env.GITHUB_REF }} -vvv
